import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import PeerIdInvalid

# Telegram Bot Token (‡¶¨‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
BOT_TOKEN = "your_bot_token_here"

# Telegram API ID & HASH (user session ‡¶ú‡¶®‡ßç‡¶Ø)
API_ID = 1234567
API_HASH = "your_api_hash_here"

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç (User session string, ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞)
USER_SESSION = "your_user_session_string_here"

# ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø (‡¶á‡¶®‡¶ü‡¶ø‡¶ú‡¶æ‡¶∞)
SOURCE_CHANNEL = -1002653036072

# ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ö‡¶ü‡ßã-‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶∏‡¶Æ‡¶Ø‡¶º (‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°)
AUTO_DELETE_TIME = 300  # ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü

# ‡¶¨‡¶ü Client (Bot Token ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá)
bot = Client("bot", bot_token=BOT_TOKEN)

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ Client (User Session ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá)
user = Client("user", api_id=API_ID, api_hash=API_HASH, session_string=USER_SESSION)


@bot.on_message(filters.private | filters.group & filters.text)
async def search_movie(bot_client: Client, message: Message):
    query = message.text.strip()
    if not query:
        await message.reply_text("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")
        return

    try:
        # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßá‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶∂‡ßÅ‡¶∞‡ßÅ
        results = []
        async for msg in user.search_messages(SOURCE_CHANNEL, query=query, limit=5):
            results.append(msg)

        if not results:
            await message.reply_text("‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡•§")
            return

        for msg in results:
            sent_msg = await message.reply_text(f"üîç ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:\n\n{msg.text or 'No text content'}")
            await asyncio.sleep(AUTO_DELETE_TIME)
            await sent_msg.delete()

    except PeerIdInvalid:
        await message.reply_text("‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶Ø‡¶º ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ì‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶®‡ßü‡•§")
    except Exception as e:
        await message.reply_text(f"‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {e}")


async def main():
    # ‡¶¶‡ßÅ‡¶ü‡ßã Client ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶¨‡ßã
    await user.start()
    await bot.start()
    print("Bot & User session started")
    await bot.idle()
    await user.stop()
    await bot.stop()


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
